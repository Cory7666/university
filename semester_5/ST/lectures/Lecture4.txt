Тема: Тестирование интерфейсов

	Каждый компонент реализует интерфейс, с помощью которого он взаимодествует с
другими модулями.

	Интерфейс - совокупность открытых сигнатур методов, которые должны быть
реализованы классом-реализатором.

	Цель тестирования интерфейсов - выявление ошибок, возникающие из-за ошибок
реализации или ошибок использования интерфейсов из-за ошибочных представлений
работы.

	Классификация интерфейсов:
	1. Параметрические интерфейсы: от одного компонента передаются данные/ссылки
на данные в виде параметров.
	2. Разделяемой памяти: способ обмена данными между параллельно работающими
процессами, когда один процесс помещает данные в общую область памяти, а другой
оттуда их читает.
	3. Процедурные интерфейсы: один модуль/система инкапсулирует набор процедур,
доступных для вызова другим подсистемам.
	4. Передачи сообщений: одна подсистема запрашивает у другой данные, передавая
ей сообщения. Результат выполнения функции передаётся вызвавшей подсистеме в
виде другого сообщения.

	Виды ошибок при тестировании интерфейсов:
	1. Неправильное использование интерфейсов. Один компонент вызывает другой
компонент и совершает ошибку типа ошибка количества, ошибка порядка аргументов
и т.д. Как правило характерен для параметрических интерфейсов.
	2. Неправильное понимание интерфейсов. Вызывающий компонент предполагает
определённой поведение вызываемого компонента. Если предполагаемое поведение
вызываемого компонента не совпадает с реаьным, то возникает ошибка.
	3. Ошибки синхронизации. Возникают в системах, в которых есть несколько
параллельно работающих процессов.

	Сложность тестирования интерфейсов заключается в том, что некоторые ошибки
могут не проявляться в обычных режимах работы системы. Ещё одна проблема при
тестировании интерфейса - ошибка интерфейса как ошибки взаимодействия двух
модулей.

	Порядок тестирования интерфейсов (набор рекомендаций):
	1. Рассмотреть тестируемый код и составить список компонентов. Разработать
тестовые наборы, в которых значения, передаваемые тестируемым компонентам,
принимают крайние значения из диапазона.
	2. Если интерфейс предполагает передачу указателей, то обязательно необходимо
тестировать и с пустыми указателями.
	3. При вызове методов через процедурный интерфейс нужно использовать
вызывающий сбои компонент.
	4. При тестировании интерфейсов передачи сообщений следует использовать
тесты с нагрузкой.
	5. При тестировании интерфейсов разделяемой памяти следует менять порядок
запуска компонентов.
	6. Провести анализ теста программы (code review или с использованием
программных инструментов).
