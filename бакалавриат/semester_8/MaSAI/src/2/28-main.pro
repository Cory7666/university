% Участники: Боря, Витя, Гриша, Егор.
% Города: Казань, Омск, Тверь, Томск.
%
% Боря говорит: сосед из Казань, один из не был в (Тверь, Томск).
% Гриша говорит: сокомандник из Тверь, противник из Казань.
% Егор говорит: с мальчиком из Тверь увлекались шахматами.

вставить(X, L1, L2) :- удалить(X, L2, L1).

удалить(X, [X | T], T).
удалить(X, [Y | T1], [Y | T2]) :-
	удалить(X, T1, T2).

генерировать([], []).
генерировать([Head | Tail], Out) :-
	генерировать(Tail, Tmp),
	вставить(Head, Tmp, Out).

полезный_олимпиадник('Боря').
полезный_олимпиадник('Гриша').
полезный_олимпиадник('Егор').

не_был_в_городе_на_т(Name) :-
    Name \= 'Тверь', Name \= 'Томск'.

проверить_по_словам('Боря', [Boris, Victor, Grisha, Egor]) :-
    Boris \= 'Казань',
    
    (Victor = 'Казань', (не_был_в_городе_на_т(Victor);
                         не_был_в_городе_на_т(Boris)));
    
    (Grisha = 'Казань', (не_был_в_городе_на_т(Grisha);
                         не_был_в_городе_на_т(Boris)));
    
    (Egor = 'Казань', (не_был_в_городе_на_т(Egor);
                       не_был_в_городе_на_т(Boris))).

проверить_по_словам('Гриша', [_, _, Grisha, _]) :-
    Grisha \= 'Тверь', Grisha \= 'Казань'.

проверить_по_словам('Егор', [_, _, _, Egor]) :- Egor \= 'Тверь'.

проверить_по_словам_всех(Stadt) :-
    проверить_по_словам('Боря', Stadt),
    проверить_по_словам('Гриша', Stadt),
    проверить_по_словам('Егор', Stadt).

генерировать_города(Out) :-
    генерировать(['Казань', 'Тверь', 'Омск', 'Томск'], Out).

решить_проблему :-
    генерировать_города(Stadt),
    проверить_по_словам_всех(Stadt),
    writeln(Stadt).